/**
 * generated by Xtext 2.31.0
 */
package org.xtext.project.cw.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.project.cw.myDsl.Attribute;
import org.xtext.project.cw.myDsl.Entity;
import org.xtext.project.cw.myDsl.Model;
import org.xtext.project.cw.myDsl.Screen;
import org.xtext.project.cw.myDsl.Trigger;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;

    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    fsa.generateFile(this.deriveTargetFileNameFor(model, resource), this.generate(model));
    final String className = this.deriveClassName(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }

  public String deriveClassName(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origFilename = resource.getURI().lastSegment();
      _xblockexpression = StringExtensions.toFirstUpper(origFilename.substring(0, origFilename.indexOf(".")));
    }
    return _xblockexpression;
  }

  public String deriveTargetFileNameFor(final Model model, final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }

  public CharSequence generate(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Entity\'s : ");
    int _size = IteratorExtensions.size(Iterators.<Entity>filter(model.eAllContents(), Entity.class));
    _builder.append(_size);
    _builder.newLineIfNotEmpty();
    _builder.append("Screen: ");
    int _size_1 = IteratorExtensions.size(Iterators.<Screen>filter(model.eAllContents(), Screen.class));
    _builder.append(_size_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String generateScreen(final Screen screen) {
    String _name = screen.getName();
    String _plus = ("Generating screen: " + _name);
    String _plus_1 = (_plus + " for ");
    String _name_1 = screen.getEntity().getName();
    return (_plus_1 + _name_1);
  }

  public String generateEntity(final Entity entity) {
    String _name = entity.getName();
    return ("Generating entity: " + _name);
  }

  public CharSequence doGenerateClass(final Model model, final String string) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.xtext.project.cw.screen.*;");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(string);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<Entity, CharSequence> _function = (Entity it) -> {
      return this.generateJavaStatement(it);
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<Entity, CharSequence>map(Iterators.<Entity>filter(model.eAllContents(), Entity.class), _function), "\n");
    _builder.append(_join, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\n", "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final Function1<Screen, CharSequence> _function_1 = (Screen it) -> {
      return this.allScreens(it);
    };
    String _join_1 = IteratorExtensions.join(IteratorExtensions.<Screen, CharSequence>map(Iterators.<Screen>filter(model.eAllContents(), Screen.class), _function_1), "\n");
    _builder.append(_join_1, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\n", "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final Function1<Screen, CharSequence> _function_2 = (Screen it) -> {
      return this.generateJavaStatement(it);
    };
    String _join_2 = IteratorExtensions.join(IteratorExtensions.<Screen, CharSequence>map(Iterators.<Screen>filter(model.eAllContents(), Screen.class), _function_2), "\n");
    _builder.append(_join_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\n", "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name = model.getStartScreen().getName();
    _builder.append(_name, "\t\t");
    _builder.append(".start();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _generateJavaStatement(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Attribute, CharSequence> _function = (Attribute it) -> {
      return this.getAttribute(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Attribute, CharSequence>map(entity.getAttributes(), _function), "\n");
    _builder.append(_join);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("Entity ");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append(" = new Entity(\"");
    String _name_1 = entity.getName();
    _builder.append(_name_1);
    _builder.append("\",");
    final Function1<Attribute, CharSequence> _function_1 = (Attribute it) -> {
      return this.getAttributeName(it);
    };
    String _join_1 = IterableExtensions.join(ListExtensions.<Attribute, CharSequence>map(entity.getAttributes(), _function_1), ",");
    _builder.append(_join_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  protected CharSequence _generateJavaStatement(final Screen screen) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Trigger, CharSequence> _function = (Trigger it) -> {
      return this.getTriggers(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Trigger, CharSequence>map(screen.getTriggers(), _function), "\n");
    _builder.append(_join);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    String _name = screen.getName();
    _builder.append(_name);
    _builder.append(".setScreen(");
    String _name_1 = screen.getEntity().getName();
    _builder.append(_name_1);
    _builder.append(",");
    final Function1<Trigger, CharSequence> _function_1 = (Trigger it) -> {
      return this.getTriggersName(it);
    };
    String _join_1 = IterableExtensions.join(ListExtensions.<Trigger, CharSequence>map(screen.getTriggers(), _function_1), ",");
    _builder.append(_join_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence getAttributeName(final Attribute at) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = at.getName();
    _builder.append(_name);
    return _builder;
  }

  public CharSequence getAttribute(final Attribute at) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Attribute ");
    String _name = at.getName();
    _builder.append(_name);
    _builder.append(" = new Attribute(\"");
    String _name_1 = at.getName();
    _builder.append(_name_1);
    _builder.append("\",\"");
    String _type = at.getType();
    _builder.append(_type);
    _builder.append("\");");
    return _builder;
  }

  public CharSequence getTriggers(final Trigger tr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Trigger ");
    String _trigger = tr.getTrigger();
    _builder.append(_trigger);
    _builder.append(" = new Trigger(\"");
    String _trigger_1 = tr.getTrigger();
    _builder.append(_trigger_1);
    _builder.append("\",");
    String _name = tr.getScreen().getName();
    _builder.append(_name);
    _builder.append(");");
    return _builder;
  }

  public CharSequence getTriggersName(final Trigger tr) {
    StringConcatenation _builder = new StringConcatenation();
    String _trigger = tr.getTrigger();
    _builder.append(_trigger);
    return _builder;
  }

  public CharSequence allScreens(final Screen screen) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Screen ");
    String _name = screen.getName();
    _builder.append(_name);
    _builder.append(" = new Screen();");
    return _builder;
  }

  public CharSequence generateJavaStatement(final EObject entity) {
    if (entity instanceof Entity) {
      return _generateJavaStatement((Entity)entity);
    } else if (entity instanceof Screen) {
      return _generateJavaStatement((Screen)entity);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity).toString());
    }
  }
}
