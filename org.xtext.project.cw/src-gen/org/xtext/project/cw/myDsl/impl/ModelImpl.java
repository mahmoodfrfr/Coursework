/**
 * generated by Xtext 2.31.0
 */
package org.xtext.project.cw.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.project.cw.myDsl.Entity;
import org.xtext.project.cw.myDsl.Model;
import org.xtext.project.cw.myDsl.MyDslPackage;
import org.xtext.project.cw.myDsl.Screen;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.cw.myDsl.impl.ModelImpl#getEntities <em>Entities</em>}</li>
 *   <li>{@link org.xtext.project.cw.myDsl.impl.ModelImpl#getScreens <em>Screens</em>}</li>
 *   <li>{@link org.xtext.project.cw.myDsl.impl.ModelImpl#getStartScreen <em>Start Screen</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getEntities() <em>Entities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntities()
   * @generated
   * @ordered
   */
  protected EList<Entity> entities;

  /**
   * The cached value of the '{@link #getScreens() <em>Screens</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScreens()
   * @generated
   * @ordered
   */
  protected EList<Screen> screens;

  /**
   * The cached value of the '{@link #getStartScreen() <em>Start Screen</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartScreen()
   * @generated
   * @ordered
   */
  protected Screen startScreen;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Entity> getEntities()
  {
    if (entities == null)
    {
      entities = new EObjectContainmentEList<Entity>(Entity.class, this, MyDslPackage.MODEL__ENTITIES);
    }
    return entities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Screen> getScreens()
  {
    if (screens == null)
    {
      screens = new EObjectContainmentEList<Screen>(Screen.class, this, MyDslPackage.MODEL__SCREENS);
    }
    return screens;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Screen getStartScreen()
  {
    if (startScreen != null && startScreen.eIsProxy())
    {
      InternalEObject oldStartScreen = (InternalEObject)startScreen;
      startScreen = (Screen)eResolveProxy(oldStartScreen);
      if (startScreen != oldStartScreen)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.MODEL__START_SCREEN, oldStartScreen, startScreen));
      }
    }
    return startScreen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Screen basicGetStartScreen()
  {
    return startScreen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartScreen(Screen newStartScreen)
  {
    Screen oldStartScreen = startScreen;
    startScreen = newStartScreen;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MODEL__START_SCREEN, oldStartScreen, startScreen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__ENTITIES:
        return ((InternalEList<?>)getEntities()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MODEL__SCREENS:
        return ((InternalEList<?>)getScreens()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__ENTITIES:
        return getEntities();
      case MyDslPackage.MODEL__SCREENS:
        return getScreens();
      case MyDslPackage.MODEL__START_SCREEN:
        if (resolve) return getStartScreen();
        return basicGetStartScreen();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__ENTITIES:
        getEntities().clear();
        getEntities().addAll((Collection<? extends Entity>)newValue);
        return;
      case MyDslPackage.MODEL__SCREENS:
        getScreens().clear();
        getScreens().addAll((Collection<? extends Screen>)newValue);
        return;
      case MyDslPackage.MODEL__START_SCREEN:
        setStartScreen((Screen)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__ENTITIES:
        getEntities().clear();
        return;
      case MyDslPackage.MODEL__SCREENS:
        getScreens().clear();
        return;
      case MyDslPackage.MODEL__START_SCREEN:
        setStartScreen((Screen)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__ENTITIES:
        return entities != null && !entities.isEmpty();
      case MyDslPackage.MODEL__SCREENS:
        return screens != null && !screens.isEmpty();
      case MyDslPackage.MODEL__START_SCREEN:
        return startScreen != null;
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
