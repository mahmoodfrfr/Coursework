/*
 * generated by Xtext 2.31.0
 */
package org.xtext.project.cw.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.project.cw.myDsl.Model
import org.xtext.project.cw.myDsl.Entity
import org.xtext.project.cw.myDsl.Screen
import org.xtext.project.cw.myDsl.Attribute
import org.xtext.project.cw.myDsl.Trigger

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	 override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val model = resource.contents.head as Model

        fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
        
        val className = resource.deriveClassName
        fsa.generateFile(className + '.java',model.doGenerateClass(className))
    }
	
	
	
	def deriveClassName(Resource resource){
		val origFilename = resource.URI.lastSegment
		
		origFilename.substring(0, origFilename.indexOf('.')).toFirstUpper 
	}
    
    def deriveTargetFileNameFor(Model model,Resource resource){
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
//	def generate(Model model) '''
//		Program Contains:
//		
//		«model.eAllContents.filter(Entity).size» Entities
//	'''
	
	private static class Environment{
		var int counter = 0;
		
		def getFreshVarName() '''«counter++»'''
	}
	
	

	
	def generate(Model model) '''
		Entity's : «model.eAllContents.filter(Entity).size»
		Screen: «model.eAllContents.filter(Screen).size»
	'''
	
	def generateScreen(Screen screen) {
		return "Generating screen: " + screen.getName() + " for " +
		screen.getEntity().getName();
	}
	
	def generateEntity(Entity entity) {
		return "Generating entity: " + entity.getName();
	}
	
	def doGenerateClass(Model model, String string) '''
	 import org.xtext.project.cw.screen.*;
	 public class «string»{
	 	
	 	public static void main(String[] args){
	 		«model.eAllContents.filter(Entity).map[generateJavaStatement].join('\n')»
	 		«'\n'»
	 		«model.eAllContents.filter(Screen).map[allScreens].join('\n')»
	 		«'\n'»
	 		«model.eAllContents.filter(Screen).map[generateJavaStatement].join('\n')»
	 		«'\n'»
	 		«model.startScreen.name».start();
	 	}
	 	
	 }
	'''
	
	dispatch def generateJavaStatement(Entity entity)  '''
	«entity.attributes.map[getAttribute].join('\n')»;
	Entity «entity.name» = new Entity("«entity.name»",«entity.attributes.map[getAttributeName].join(',')»);
	'''
	dispatch def generateJavaStatement(Screen screen)  '''
	«screen.triggers.map[getTriggers].join('\n')»;
	«screen.name».setScreen(«screen.entity.name»,«screen.triggers.map[getTriggersName].join(',')»);
	'''
	
	
	def getAttributeName(Attribute at) '''«at.name»'''
	def getAttribute(Attribute at) '''Attribute «at.name» = new Attribute("«at.name»","«at.type»");'''
	def getTriggers(Trigger tr) '''Trigger «tr.trigger» = new Trigger("«tr.trigger»",«tr.screen.name»);'''	
	def getTriggersName(Trigger tr) '''«tr.trigger»'''
	
	def allScreens(Screen screen) '''Screen «screen.name» = new Screen();'''

 	
 	
}


	
